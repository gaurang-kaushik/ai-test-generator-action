name: 'AI Test Generator'
description: 'Automatically generates JUnit5 + Mockito test classes using AI and enforces code coverage thresholds'
author: 'AI Test Generator'

inputs:
  api-key:
    description: 'Google API key for Gemini AI'
    required: true
  coverage-threshold:
    description: 'Minimum code coverage threshold (percentage)'
    required: false
    default: '80'
  source-path:
    description: 'Path to Java source files relative to repository root'
    required: false
    default: 'src/main/java'
  test-path:
    description: 'Path for generated test files relative to repository root'
    required: false
    default: 'src/test/java'
  model:
    description: 'AI model to use for test generation'
    required: false
    default: 'gemini-1.5-pro'
  auto-commit:
    description: 'Whether to automatically commit generated tests'
    required: false
    default: 'false'

runs:
  using: 'composite'
  steps:
    - name: Set environment variables
      shell: bash
      run: |
        echo "GOOGLE_API_KEY=${{ inputs.api-key }}" >> $GITHUB_ENV
        echo "SOURCE_PATH=${{ inputs.source-path }}" >> $GITHUB_ENV
        echo "TEST_PATH=${{ inputs.test-path }}" >> $GITHUB_ENV
        echo "COVERAGE_THRESHOLD=${{ inputs.coverage-threshold }}" >> $GITHUB_ENV
        echo "MODEL=${{ inputs.model }}" >> $GITHUB_ENV
        echo "AUTO_COMMIT=${{ inputs.auto-commit }}" >> $GITHUB_ENV
        
        # Set git diff variables for detecting changed files
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "BASE_SHA=${{ github.event.pull_request.base.sha }}" >> $GITHUB_ENV
          echo "HEAD_SHA=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV
        else
          # For push events, compare with previous commit
          # Use HEAD~1 if github.event.before is null or empty
          if [ -n "${{ github.event.before }}" ] && [ "${{ github.event.before }}" != "null" ]; then
            echo "BASE_SHA=${{ github.event.before }}" >> $GITHUB_ENV
          else
            echo "BASE_SHA=HEAD~1" >> $GITHUB_ENV
          fi
          echo "HEAD_SHA=${{ github.sha }}" >> $GITHUB_ENV
        fi
        
        # Debug: Print the SHA values
        echo "🔍 Debug - BASE_SHA: $BASE_SHA"
        echo "🔍 Debug - HEAD_SHA: $HEAD_SHA"

    - name: Download AI Test Generator scripts
      shell: bash
      run: |
        echo "📥 Downloading AI Test Generator scripts..."
        curl -o generate_tests.py https://raw.githubusercontent.com/gaurang-kaushik/ai-test-generator-action/main/generate_tests.py
        curl -o ci_generate_tests.py https://raw.githubusercontent.com/gaurang-kaushik/ai-test-generator-action/main/ci_generate_tests.py
        curl -o ci_iterate_tests.py https://raw.githubusercontent.com/gaurang-kaushik/ai-test-generator-action/main/ci_iterate_tests.py
        curl -o ci_error_driven_iterate.py https://raw.githubusercontent.com/gaurang-kaushik/ai-test-generator-action/main/ci_error_driven_iterate.py
        curl -o enhanced_context_generator.py https://raw.githubusercontent.com/gaurang-kaushik/ai-test-generator-action/main/enhanced_context_generator.py
        curl -o surgical_error_fixer.py https://raw.githubusercontent.com/gaurang-kaushik/ai-test-generator-action/main/surgical_error_fixer.py
        curl -o PROMPT_GUIDE.md https://raw.githubusercontent.com/gaurang-kaushik/ai-test-generator-action/main/PROMPT_GUIDE.md
        curl -o requirements.txt https://raw.githubusercontent.com/gaurang-kaushik/ai-test-generator-action/main/requirements.txt
        echo "✅ Scripts downloaded"

    - name: Install Python dependencies
      shell: bash
      run: |
        echo "📦 Installing Python dependencies..."
        pip install -r requirements.txt
        echo "✅ Dependencies installed"

    - name: Generate initial tests
      shell: bash
      run: |
        echo "🚀 Starting AI Test Generator..."
        echo "📋 Environment variables:"
        echo "  - SOURCE_PATH: $SOURCE_PATH"
        echo "  - TEST_PATH: $TEST_PATH"
        echo "  - BASE_SHA: $BASE_SHA"
        echo "  - HEAD_SHA: $HEAD_SHA"
        echo "  - MODEL: $MODEL"
        echo "  - GOOGLE_API_KEY: ${GOOGLE_API_KEY:0:10}..."
        echo ""
        echo "🔍 Checking for changed files..."
        timeout 300 python3 ci_generate_tests.py || echo "⚠️ Test generation timed out or failed"
        echo "✅ Initial test generation completed"

    - name: Run Maven tests and measure coverage
      shell: bash
      run: |
        echo "🔍 Running Maven tests with coverage..."
        cd JtProject
        mvn clean test -DskipTests=false || echo "⚠️ Some tests failed, will run error-driven iteration"
        echo "✅ Maven tests completed"

    - name: Error-driven test improvement
      shell: bash
      run: |
        echo "🔄 Starting error-driven test improvement..."
        python3 ci_error_driven_iterate.py || echo "⚠️ Error-driven iteration failed, continuing with smart failure handling"
        echo "✅ Error-driven improvement completed"

    - name: Final build check and commit decision
      shell: bash
      run: |
        echo "🔍 Final build check..."
        cd JtProject
        
        # Try to run Maven tests
        if mvn clean test -DskipTests=false; then
          echo "✅ All tests passing! Committing all test files..."
          cd ..
          
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add all test files
          git add $TEST_PATH/
          
          # Check if there are changes to commit
          if ! git diff --staged --quiet; then
            echo "✅ Committing all working test files..."
            git commit -m "🤖 AI-generated test files - All tests passing ✅"
            
            # Push the changes
            echo "🚀 Pushing all test files to repository..."
            # Use the correct branch name - for PRs use head_ref, for pushes use ref_name
            if [ "${{ github.event_name }}" = "pull_request" ]; then
              BRANCH_NAME="${{ github.head_ref }}"
            else
              BRANCH_NAME="${{ github.ref_name }}"
            fi
            echo "📋 Branch name: $BRANCH_NAME"
            git push origin HEAD:$BRANCH_NAME
            echo "✅ All test files committed and pushed successfully!"
          else
            echo "ℹ️ No changes to commit"
          fi
        else
          echo "⚠️ Some tests still failing after error-driven iteration"
          echo "🔧 Applying smart failure handling - will commit only working tests..."
          cd ..
          
          # The ci_error_driven_iterate.py should have already handled persistent failures
          # and removed problematic test files. Let's commit what's left.
          
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add remaining test files
          git add $TEST_PATH/
          
          # Check if there are changes to commit
          if ! git diff --staged --quiet; then
            echo "✅ Committing working test files (failing tests removed)..."
            git commit -m "🤖 AI-generated test files - Partial success (failing tests removed)"
            
            # Push the changes
            echo "🚀 Pushing working test files to repository..."
            # Use the correct branch name - for PRs use head_ref, for pushes use ref_name
            if [ "${{ github.event_name }}" = "pull_request" ]; then
              BRANCH_NAME="${{ github.head_ref }}"
            else
              BRANCH_NAME="${{ github.ref_name }}"
            fi
            echo "📋 Branch name: $BRANCH_NAME"
            git push origin HEAD:$BRANCH_NAME
            echo "✅ Working test files committed and pushed successfully!"
          else
            echo "ℹ️ No changes to commit"
          fi
        fi

    - name: Final coverage check
      shell: bash
      run: |
        echo "📊 Final coverage report..."
        cd JtProject
        mvn jacoco:report || echo "⚠️ JaCoCo report generation failed, continuing..."
        cd ..
        python3 -c "
        import sys
        sys.path.append('.')
        try:
            from ci_iterate_tests import read_line_coverage
            coverage = read_line_coverage()
            threshold = float('${{ inputs.coverage-threshold }}')
            print(f'Final coverage: {coverage}% (threshold: {threshold}%)')
            if coverage < threshold:
                print(f'❌ Coverage {coverage}% is below threshold {threshold}%')
                exit(1)
            else:
                print(f'✅ Coverage {coverage}% meets threshold {threshold}%')
        except Exception as e:
            print(f'⚠️ Could not read coverage: {e}')
            print('ℹ️ Continuing without coverage check...')
        "

